{
  "quiz_title": "Python - Functions Quiz",
  "questions": [
    {
      "answer_index": 1,
      "options": [
        "It must always return a numerical value.",
        "It is a block of code that only runs when it is called.",
        "It can only be defined once in a program.",
        "It automatically executes when the Python script starts."
      ],
      "question": "What is the primary characteristic of a Python function?",
      "tags": [
        "python function basics",
        "terminology"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 2,
      "options": [
        "fun",
        "define",
        "def",
        "function"
      ],
      "question": "Which keyword is used to define a function in Python?",
      "tags": [
        "function definition",
        "syntax"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "call calculate_sum()",
        "calculate_sum()",
        "execute calculate_sum",
        "run calculate_sum"
      ],
      "question": "How do you correctly call a Python function named `calculate_sum` that takes no arguments?",
      "tags": [
        "python function basics",
        "syntax"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "An argument",
        "A parameter",
        "A global variable",
        "A return value"
      ],
      "question": "In the function definition `def greet(user_name):`, what is `user_name` technically referred to?",
      "tags": [
        "terminology",
        "function definition"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "It runs, and `b` is automatically assigned `None`.",
        "It raises a TypeError because an argument is missing.",
        "It runs, and `b` is automatically assigned `0`.",
        "The function call is silently ignored by Python."
      ],
      "question": "If a function is defined as `def print_product(a, b):` (expecting two arguments), what happens if you call it as `print_product(5)`?",
      "tags": [
        "passing function arguments",
        "error handling"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "To print output directly to the console.",
        "To end the function's execution and optionally send a value back to the caller.",
        "To assign a value to a global variable.",
        "To indicate the start of the function's code block."
      ],
      "question": "What is the main purpose of the `return` statement in a Python function?",
      "tags": [
        "return values",
        "function return values"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 2,
      "options": [
        "0",
        "True",
        "None",
        "An empty string (\"\")"
      ],
      "question": "If a Python function does not explicitly use a `return` statement to send back a value, what does it return by default?",
      "tags": [
        "return values",
        "function return values"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "def my_func(&params):",
        "def my_func(*params):",
        "def my_func(**params):",
        "def my_func(params[]):"
      ],
      "question": "To allow a function to accept an arbitrary number of positional arguments, which syntax is used in its definition?",
      "tags": [
        "*args and **kwargs",
        "passing function arguments"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 2,
      "options": [
        "A tuple of keyword arguments",
        "A list of argument values",
        "A dictionary where keys are argument names and values are their values",
        "A set of unique argument names"
      ],
      "question": "When you define a function with `**kwargs`, what Python data type does `kwargs` become inside the function?",
      "tags": [
        "*args and **kwargs",
        "terminology"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 3,
      "options": [
        "configure_system(\"active\")",
        "configure_system(mode=\"passive\", retries=5)",
        "configure_system(verbose=True, mode=\"test\", retries=1)",
        "configure_system(mode=\"backup\", verbose=True, 2)"
      ],
      "question": "Given `def configure_system(mode, retries=3, verbose=False):`, which of the following function calls is INVALID due to syntax rules?",
      "tags": [
        "passing function arguments",
        "syntax",
        "keyword arguments"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 2,
      "options": [
        "A `break` statement outside of any loop.",
        "A `return None` statement.",
        "A base case that, when met, stops the recursion.",
        "The use of the `**kwargs` parameter."
      ],
      "question": "What is essential for a recursive function to eventually stop calling itself?",
      "tags": [
        "recursive functions",
        "error handling"
      ],
      "type": "multiple_choice"
    },
    {
      "answer_index": 1,
      "options": [
        "That `user`, `host`, and `port` can accept any number of values (like *args).",
        "That `user`, `host`, and `port` must be passed as keyword arguments only.",
        "That all arguments are optional.",
        "That the function will return a pointer."
      ],
      "question": "In a Python function definition `def setup_config(*, user, host, port=22):`, what does the `*` (asterisk) indicate?",
      "tags": [
        "positional-only and keyword-only arguments",
        "syntax"
      ],
      "type": "multiple_choice"
    },
    {
      "correct_answer": "return",
      "question": "To send a value back from a function, you use the ____ statement.",
      "tags": [
        "return values",
        "syntax"
      ],
      "type": "fill_in_the_blank"
    },
    {
      "question": "Write a Python function named `greet` that takes one argument, `name`, and returns the string 'Hello, [name]!'.",
      "sample_solution": "def greet(name):\n    return f'Hello, {name}!'",
      "starter_code": "def greet(name):\n    # Your code here",
      "tags": [
        "function definition",
        "return values",
        "passing function arguments"
      ],
      "type": "coding"
    },
    {
      "type": "multiple_choice",
      "question": "test test",
      "tags": [
        "test",
        "test2"
      ],
      "options": [
        "test",
        "sets"
      ],
      "answer_index": 0
    }
  ],
  "updated_date": "2025-01-01"
}