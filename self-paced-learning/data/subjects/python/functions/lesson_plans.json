{
  "lessons": [
    {
      "title": "Python Functions",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "A function is a block of reusable code that only runs when it is called. You can pass data (known as parameters) into a function, and a function can return a result."
        },
        {
          "type": "paragraph",
          "text": "Functions help you avoid repetition, make code more organized, and allow easier debugging."
        }
      ],
      "tags": ["function_basics", "function_definition", "terminology"],
      "type": "remedial",
      "updated_date": "2025-09-25",
      "order": 1,
      "id": "python-functions-intro"
    },
    {
      "title": "The 'def' Keyword",
      "videoId": "",
      "content": [
        {
          "type": "header",
          "text": "<strong>def</strong> keyword"
        },
        {
          "type": "paragraph",
          "text": "In Python, you define a function using the def keyword:"
        },
        {
          "type": "code",
          "text": "def my_function():\n    print(\"Hello from a function\")"
        },
        {
          "type": "paragraph",
          "text": "You call a function by using its name followed by parentheses:"
        },
        {
          "type": "code",
          "text": "def my_function():\n    print(\"Hello from a function\")\n\nmy_function()\n\n# Output:\n# Hello from a function"
        },
        {
          "type": "header",
          "text": "<em>Practice 1:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function welcome_message() that prints a two-line welcome message."
        },
        {
          "type": "code_runner",
          "starter_code": "# Write your function here\n# def welcome_message():\n#     Your code here\n\n# Call your function\n# welcome_message()",
          "expected_output": "Welcome to Python!\nLet's start coding.",
          "solution": "def welcome_message():\n    print(\"Welcome to Python!\")\n    print(\"Let's start coding.\")\n\nwelcome_message()",
          "hints": [
            "Use the 'def' keyword to define your function",
            "Remember to use print() statements inside the function",
            "Don't forget to call the function after defining it"
          ]
        },
        {
          "type": "header",
          "text": "<em>Practice 2:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function repeat_hello() that prints \"Hello\" five times."
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that prints \"Hello\" five times\n# def repeat_hello():\n#     Your code here\n\n# Call your function\n# repeat_hello()",
          "expected_output": "Hello\nHello\nHello\nHello\nHello",
          "solution": "def repeat_hello():\n    for i in range(5):\n        print(\"Hello\")\n\nrepeat_hello()",
          "hints": [
            "Use a for loop with range(5) to repeat 5 times",
            "Each iteration should print \"Hello\"",
            "Remember to call the function after defining it"
          ]
        }
      ],
      "tags": ["function_definition", "function_basics", "syntax"],
      "type": "remedial",
      "updated_date": "2025-09-25",
      "order": 2,
      "id": "def-keyword"
    },
    {
      "title": "Function Parameters",
      "videoId": "",
      "content": [
        {
          "type": "header",
          "text": "<strong>Function Parameters</strong>"
        },
        {
          "type": "paragraph",
          "text": "Information can be passed into functions as parameters. Parameters act as variables inside the function."
        },
        {
          "type": "paragraph",
          "text": "<em>Note: A function can have multiple parameters, separated by commas.</em>"
        },
        {
          "type": "code",
          "text": "def greet(name):\n    print(\"Hello\", name)\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n\n# Output:\n# Hello Alice\n# Hello Bob"
        },
        {
          "type": "paragraph",
          "text": "<em>Number of Arguments</em>: When calling a function, you must provide the exact number of arguments it expects."
        },
        {
          "type": "code",
          "text": "def add(x, y):\n    print(x + y)\n\nadd(5, 7)    # Correct\n\n# Output:\n# 12"
        },
        {
          "type": "paragraph",
          "text": "<em>Default Parameter Value</em>: You can assign a default value to a parameter. If the caller does not provide it, the default will be used."
        },
        {
          "type": "code",
          "text": "def greet(name=\"Student\"):\n    print(\"Hello\", name)\n\ngreet(\"Alice\")\ngreet()\n\n# Output:\n# Hello Alice\n# Hello Student"
        },
        {
          "type": "paragraph",
          "text": "<em>Keyword Arguments</em> : You can also pass arguments by name (keywords). The order then does not matter."
        },
        {
          "type": "code",
          "text": "def student_info(name, age):\n    print(name, \"is\", age, \"years old\")\n\nstudent_info(age=20, name=\"Alice\")\n\n# Output:\n# Alice is 20 years old"
        },
        {
          "type": "header",
          "text": "<em>Practice 1:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function square(num) that returns the square of a number."
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that returns the square of a number\n# def square(num):\n#     Your code here\n\n# Test your function\nprint(square(3))\nprint(square(5))\nprint(square(10))",
          "expected_output": "9\n25\n100",
          "solution": "def square(num):\n    return num * num\n\n# Test the function\nprint(square(3))\nprint(square(5))\nprint(square(10))",
          "hints": [
            "Use 'return' instead of 'print' inside the function",
            "Multiply the number by itself: num * num",
            "The function should return the result, not print it"
          ]
        },
        {
          "type": "header",
          "text": "<em>Practice 2:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function personal_greeting(name, city) that prints a personalized greeting."
        },
        {
          "type": "list",
          "items": [
            "Create a function named personal_greeting(name, city) that:",
            "Accepts two parameters: a person’s name and the city they live in.",
            "Prints a sentence like: \"Hi Alice, how is the weather in New York?\".",
            "Call the function at least twice with different names and cities."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that takes name and city as parameters\n# def personal_greeting(name, city):\n#     Your code here\n\n# Test your function with two different calls\n# personal_greeting(\"Alice\", \"New York\")\n# personal_greeting(\"Bob\", \"Chicago\")",
          "expected_output": "Hi Alice, how is the weather in New York?\nHi Bob, how is the weather in Chicago?",
          "solution": "def personal_greeting(name, city):\n    print(f\"Hi {name}, how is the weather in {city}?\")\n\npersonal_greeting(\"Alice\", \"New York\")\npersonal_greeting(\"Bob\", \"Chicago\")",
          "hints": [
            "Use f-string formatting: f\"Hi {name}, how is the weather in {city}?\"",
            "Make sure to call the function twice with different arguments",
            "Remember to include the print() statement inside the function"
          ]
        },
        {
          "type": "header",
          "text": "<em>Practice 3:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function named divide(a, b) that:"
        },
        {
          "type": "list",
          "items": [
            "Accepts two numbers.",
            "Prints the result of a / b.",
            "If b is 0, instead print \"Error: Division by zero is not allowed\"."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that divides two numbers safely\n# def divide(a, b):\n#     Your code here\n\n# Test your function\n# divide(10, 2)\n# divide(5, 0)",
          "expected_output": "5.0\nError: Division by zero is not allowed",
          "solution": "def divide(a, b):\n    if b == 0:\n        print(\"Error: Division by zero is not allowed\")\n    else:\n        print(a / b)\n\ndivide(10, 2)\ndivide(5, 0)",
          "hints": [
            "Use an if-else statement to check if b equals 0",
            "Print the error message if b is 0, otherwise print a / b",
            "Remember to test with both a valid division and division by zero"
          ]
        }
      ],
      "tags": [
        "function_arguments",
        "keyword_arguments",
        "function_definition",
        "terminology"
      ],
      "type": "remedial",
      "updated_date": "2025-09-25",
      "order": 3,
      "id": "function-parameters"
    },
    {
      "title": "Arbitrary Arguments (*args & **kwargs)",
      "videoId": "",
      "content": [
        {
          "type": "header",
          "text": "<strong>Arbitrary Arguments</strong> (*args) :"
        },
        {
          "type": "paragraph",
          "text": "If you don’t know how many arguments will be passed, use *args. Inside the function, args is treated as a tuple."
        },
        {
          "type": "code",
          "text": "def total(*numbers):\n    print(sum(numbers))\n\ntotal(5, 10, 15)\n\n# Output:\n# 30"
        },
        {
          "type": "paragraph",
          "text": "<em>Arbitrary Keyword Arguments</em> (**kwargs)"
        },
        {
          "type": "paragraph",
          "text": "If you don’t know how many keyword arguments will be passed, use **kwargs. Inside the function, kwargs is treated as a dictionary."
        },
        {
          "type": "code",
          "text": "def student(**info):\n    print(\"Name:\", info[\"name\"])\n    print(\"Age:\", info[\"age\"])\n\nstudent(name=\"Alice\", age=21)\n\n# Output:\n# Name: Alice\n# Age: 21"
        },
        {
          "type": "header",
          "text": "<em>Practice 1:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function print_friends(*friends) that:"
        },
        {
          "type": "list",
          "items": [
            "Accepts any number of names.",
            "Prints them all in a single line, separated by commas.",
            "Test it with 3 and then 5 names."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that accepts any number of friend names\n# def print_friends(*friends):\n#     Your code here\n\n# Test with 3 names\n# print_friends(\"Alice\", \"Bob\", \"Charlie\")\n\n# Test with 5 names\n# print_friends(\"Tom\", \"Jerry\", \"Mickey\", \"Minnie\", \"Donald\")",
          "expected_output": "My friends are: Alice, Bob, Charlie\nMy friends are: Tom, Jerry, Mickey, Minnie, Donald",
          "solution": "def print_friends(*friends):\n    print(\"My friends are:\", \", \".join(friends))\n\nprint_friends(\"Alice\", \"Bob\", \"Charlie\")\nprint_friends(\"Tom\", \"Jerry\", \"Mickey\", \"Minnie\", \"Donald\")",
          "hints": [
            "Use *friends to accept any number of arguments",
            "Use ', '.join(friends) to combine all names with commas",
            "Test the function with both 3 and 5 names as requested"
          ]
        },
        {
          "type": "header",
          "text": "<em>Practice 2:</em>"
        },
        {
          "type": "paragraph",
          "text": "Create a function named employee(**data) that uses arbitrary keyword arguments."
        },
        {
          "type": "paragraph",
          "text": "Your function should:"
        },
        {
          "type": "list",
          "items": [
            "Accept employee details as keyword arguments. At a minimum, expect three fields:",
            "Print a single formatted sentence in this style:",
            "After defining the function, call it at least once with all three keyword arguments (e.g., employee(name=\"Alice\", role=\"Engineer\", salary=70000))."
          ]
        },
        {
          "type": "paragraph",
          "text": "\"name\" (string) → employee’s name<br>\"role\" (string) → employee’s job role<br>\"salary\" (integer or float) → employee’s yearly salary"
        },
        {
          "type": "paragraph",
          "text": "Name: Alice, Role: Engineer, Salary: 70000"
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that accepts employee data as keyword arguments\n# def employee(**data):\n#     Your code here\n\n# Test your function\n# employee(name=\"Alice\", role=\"Engineer\", salary=70000)",
          "expected_output": "Name: Alice, Role: Engineer, Salary: 70000",
          "solution": "def employee(**data):\n    print(f\"Name: {data['name']}, Role: {data['role']}, Salary: {data['salary']}\")\n\n# Example calls\nemployee(name=\"Alice\", role=\"Engineer\", salary=70000)",
          "hints": [
            "Use **data to accept any number of keyword arguments",
            "Access dictionary values using data['name'], data['role'], data['salary']",
            "Use f-string formatting to create the output sentence"
          ]
        }
      ],
      "tags": ["args_kwargs", "function_arguments", "terminology"],
      "type": "remedial",
      "updated_date": "2025-09-25",
      "order": 4,
      "id": "arbitrary-arguments"
    },
    {
      "title": "Return Values",
      "videoId": "",
      "content": [
        {
          "type": "header",
          "text": "<strong>Return Values</strong>"
        },
        {
          "type": "paragraph",
          "text": "A function can return a value using the return statement."
        },
        {
          "type": "paragraph",
          "text": "<em>Tip</em>: Returning is different from printing. Printing shows output on the screen, while returning gives you a value to use later."
        },
        {
          "type": "code",
          "text": "def add(a, b):\n    return a + b\n\nresult = add(5, 7)\nprint(result)\n\n# Output:\n# 12"
        },
        {
          "type": "header",
          "text": "<em>Practice 1:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a function multiply(a, b) that:\n\nReturns the product of a and b."
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a function that returns the product of two numbers\n# def multiply(a, b):\n#     Your code here\n\n# Test your function\n# print(multiply(2, 5))",
          "expected_output": "10",
          "solution": "def multiply(a, b):\n    return a * b\n\nprint(multiply(2, 5))",
          "hints": [
            "Use the 'return' keyword, not 'print' inside the function",
            "Multiply the two parameters: a * b",
            "Remember to print the result when calling the function"
          ]
        }
      ],
      "tags": ["return_values", "function_basics", "syntax"],
      "type": "remedial",
      "updated_date": "2025-09-25",
      "order": 5,
      "id": "return-values"
    },
    {
      "title": "Python Functions – Summary",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "Functions are one of the most important building blocks in Python.<br>They let us <strong>group reusable code</strong>, make programs <strong>easier to read</strong>, and reduce mistakes by avoiding repetition."
        },
        {
          "type": "header",
          "text": "Key Points"
        },
        {
          "type": "list",
          "items": [
            "<strong>Defining a Function</strong><ul><li>Use the <code>def</code> keyword followed by the function name and parentheses.</li><li>Example:<div class=\"highlight\"><pre><span></span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n</pre></div></li></ul>",
            "<strong>Calling a Function</strong><ul><li>Execute the function by writing its name followed by <code>()</code>.</li><li>Example:<div class=\"highlight\"><pre><span></span><span class=\"n\">my_function</span><span class=\"p\">()</span>\n</pre></div></li></ul>",
            "<strong>Parameters and Arguments</strong><ul><li>Parameters are placeholders in the function definition.</li><li>Arguments are the actual values you pass when calling.</li></ul>",
            "<strong>Default Parameters</strong><ul><li>You can give parameters default values so they are optional.</li><li>⚠️ Avoid using mutable objects (lists, dicts) as defaults.</li></ul>",
            "<strong>Keyword Arguments</strong><ul><li>Specify arguments by <strong>name</strong>, not just position.</li><li>This makes calls more readable and flexible.</li></ul>",
            "<strong>Arbitrary Arguments</strong><ul><li><code>*args</code> lets you pass many positional arguments (tuple).</li><li><code>**kwargs</code> lets you pass many keyword arguments (dictionary).</li></ul>",
            "<strong>Return Values</strong><ul><li>Functions can return values using the <code>return</code> keyword.</li><li>Without <code>return</code>, a function gives back <code>None</code>.</li></ul>",
            "<strong>Recursion</strong><ul><li>A function can call itself.</li><li>Always include a <strong>base case</strong> to stop recursion.</li><li>Python has a recursion depth limit.</li></ul>",
            "<strong>Best Practices</strong><ul><li>Keep functions small and focused on one task.</li><li>Use descriptive names.</li><li>Document with docstrings.</li><li>Avoid unexpected side effects.</li><li>Test with different inputs, including edge cases.</li></ul>"
          ]
        },
        {
          "type": "header",
          "text": "Why Functions Matter"
        },
        {
          "type": "list",
          "items": [
            "They make programs <strong>modular</strong>: easier to understand, test, and maintain.",
            "They allow <strong>code reuse</strong>, saving time and effort.",
            "They support <strong>abstraction</strong>, letting you hide complexity behind a simple interface."
          ]
        },
        {
          "type": "header",
          "text": "✅ Next Step for Students"
        },
        {
          "type": "list",
          "items": [
            "Practice by writing small utility functions (calculators, converters, string formatters).",
            "Try combining different parameter types (<code>*args</code>, <code>**kwargs</code>, defaults) in one function.",
            "Challenge yourself with recursive problems (factorial, Fibonacci, sum of a list)."
          ]
        }
      ],
      "tags": ["python", "functions", "summary", "best practices"],
      "type": "initial",
      "updated_date": "2025-09-25",
      "order": 7,
      "id": "python-functions-summary"
    },
    {
      "title": "Recursion",
      "videoId": "",
      "content": [
        {
          "type": "header",
          "text": "<strong>Recursion</strong>"
        },
        {
          "type": "paragraph",
          "text": "A function can call itself. This is called recursion."
        },
        {
          "type": "code",
          "text": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n# Output:\n# 120"
        },
        {
          "type": "header",
          "text": "<em>Practice 1:</em>"
        },
        {
          "type": "paragraph",
          "text": "Write a recursive function sum_n(n) that:\n\nReturns the sum of numbers from 1 to n."
        },
        {
          "type": "code_runner",
          "starter_code": "# Write a recursive function that sums numbers from 1 to n\n# def sum_n(n):\n#     Your base case here (if n == 1)\n#     Your recursive case here\n\n# Test your function\n# print(sum_n(5))  # Should output 15",
          "expected_output": "15",
          "solution": "def sum_n(n):\n    if n == 1:\n        return 1\n    return n + sum_n(n-1)\n\nprint(sum_n(5))  # 15",
          "hints": [
            "Base case: if n == 1, return 1",
            "Recursive case: return n + sum_n(n-1)",
            "Test with sum_n(5) which should equal 1+2+3+4+5 = 15"
          ]
        }
      ],
      "tags": ["recursion", "function_basics", "error_handling"],
      "type": "remedial",
      "updated_date": "2025-01-01",
      "order": 8,
      "id": "recursion"
    }
  ],
  "updated_date": "2025-10-02"
}
