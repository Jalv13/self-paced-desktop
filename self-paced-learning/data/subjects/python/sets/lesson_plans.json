{
  "lessons": {
    "sets-introduction": {
      "title": "Understanding Python Sets",
      "type": "initial",
      "order": 1,
      "videoId": "",
      "tags": [
        "python",
        "sets",
        "fundamentals"
      ],
      "content": [
        {
          "type": "paragraph",
          "text": "A set is an unordered collection of unique, hashable values. Sets are perfect when you need to remove duplicates or check for membership quickly."
        },
        {
          "type": "list",
          "items": [
            "Use curly braces `{}` to declare a set, or call `set()` on an iterable.",
            "Duplicate entries are automatically removed.",
            "Membership checks such as `value in my_set` are O(1) on average."
          ]
        },
        {
          "type": "code",
          "text": "numbers = {1, 2, 3, 3, 4}\nprint(numbers)  # {1, 2, 3, 4}\nprint(3 in numbers)  # True"
        },
        {
          "type": "checklist",
          "items": [
            "Create an empty set using `set()` (not `{}` which creates a dict).",
            "Practice converting a list with duplicates into a set to deduplicate values.",
            "Use `len()` on a set to count unique entries."
          ]
        }
      ]
    },
    "set-operations": {
      "title": "Working with Set Operations",
      "type": "initial",
      "order": 2,
      "videoId": "",
      "tags": [
        "python",
        "sets",
        "operations"
      ],
      "content": [
        {
          "type": "paragraph",
          "text": "Python exposes mathematical set operations that allow you to combine, compare, and subtract collections of unique values."
        },
        {
          "type": "list",
          "items": [
            "Union: `a | b` or `a.union(b)`",
            "Intersection: `a & b` or `a.intersection(b)`",
            "Difference: `a - b` or `a.difference(b)`",
            "Symmetric difference: `a ^ b`"
          ]
        },
        {
          "type": "code",
          "text": "students_morning = {\"Avery\", \"Riley\", \"Noor\"}\nstudents_evening = {\"Noor\", \"Zara\"}\n\nprint(students_morning | students_evening)  # Union\nprint(students_morning & students_evening)  # Intersection\nprint(students_morning - students_evening)  # Only morning"
        },
        {
          "type": "code_runner",
          "starter_code": "backend = {\"FastAPI\", \"Flask\", \"Django\"}\nfrontend = {\"React\", \"Vue\", \"Django\"}\n\n# TODO: build a set with tools used on both sides\nboth = ...\nprint(both)",
          "expected_output": "{'Django'}",
          "solution": "backend = {\"FastAPI\", \"Flask\", \"Django\"}\nfrontend = {\"React\", \"Vue\", \"Django\"}\n\nboth = backend & frontend\nprint(both)",
          "hints": [
            "Look for the operation that keeps only shared values.",
            "You can use either the method call or the operator syntax."
          ]
        }
      ]
    }
  },
  "updated_date": "2025-10-06"
}
