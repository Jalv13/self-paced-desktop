{
  "lessons": {
    "what-is-a-list": {
      "title": "What is a List?",
      "videoId": "kvO_nHnvPtQ",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83d\udccc **What is a List?**"
        },
        {
          "type": "paragraph",
          "text": "A list in Python is like a container that can hold many values. Lists are:"
        },
        {
          "type": "list",
          "items": [
            "**Ordered**: items keep their position (1st, 2nd, 3rd, ...).",
            "**Mutable**: you can add, remove, or change items after creating the list.",
            "**Flexible**: they can hold different types at the same time (text, numbers, booleans).",
            "**Delimited by square brackets []**: items are separated by commas."
          ]
        },
        {
          "type": "paragraph",
          "text": "**Everyday analogy**: A grocery list on paper \u2014 each line is an item, and you can add or cross out items."
        },
        {
          "type": "code_runner",
          "starter_code": "# Examples: different kinds of lists\nshopping = [\"milk\", \"bread\", \"eggs\"]   # strings (text)\nscores = [90, 85, 100, 72]             # numbers\nmixed = [\"Alice\", 25, True, 3.14]      # mixed types\n\n# Print all three lists to see the output\nprint(\"Shopping list:\", shopping)\nprint(\"Scores:\", scores)\nprint(\"Mixed list:\", mixed)",
          "expected_output": "Shopping list: ['milk', 'bread', 'eggs']\nScores: [90, 85, 100, 72]\nMixed list: ['Alice', 25, True, 3.14]",
          "solution": "# Examples: different kinds of lists\nshopping = [\"milk\", \"bread\", \"eggs\"]   # strings (text)\nscores = [90, 85, 100, 72]             # numbers\nmixed = [\"Alice\", 25, True, 3.14]      # mixed types\n\n# Print all three lists to see the output\nprint(\"Shopping list:\", shopping)\nprint(\"Scores:\", scores)\nprint(\"Mixed list:\", mixed)",
          "hints": [
            "Lists can contain different data types in the same list",
            "Use square brackets [] to create a list",
            "Separate items with commas"
          ]
        }
      ],
      "tags": ["python syntax", "lists", "data types"],
      "type": "initial",
      "order": 2,
      "created_date": "2025-01-01"
    },
    "list-creation": {
      "title": "List Creation",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Creation**"
        },
        {
          "type": "paragraph",
          "text": "There are many ways to create a list in Python. You can start with items already inside, start empty and add later, or convert from another data source like a string or a range of numbers."
        },
        {
          "type": "code_runner",
          "starter_code": "# 1) Using square brackets []\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# 2) Using the list() constructor with another iterable (e.g., tuple)\ncolors = list((\"red\", \"green\", \"blue\"))  # note the parentheses\n\n# 3) Start with an empty list and add items later\nanimals = []\nanimals.append(\"dog\")\nanimals.append(\"cat\")\n\n# 4) Create from a string or range\nletters = list(\"hello\")   # turns each character into an item\nnumbers = list(range(5))  # 0, 1, 2, 3, 4\n\n# Print all created lists\nprint(\"Fruits:\", fruits)\nprint(\"Colors:\", colors)\nprint(\"Animals:\", animals)\nprint(\"Letters:\", letters)\nprint(\"Numbers:\", numbers)",
          "expected_output": "Fruits: ['apple', 'banana', 'cherry']\nColors: ['red', 'green', 'blue']\nAnimals: ['dog', 'cat']\nLetters: ['h', 'e', 'l', 'l', 'o']\nNumbers: [0, 1, 2, 3, 4]",
          "solution": "# 1) Using square brackets []\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# 2) Using the list() constructor with another iterable (e.g., tuple)\ncolors = list((\"red\", \"green\", \"blue\"))  # note the parentheses\n\n# 3) Start with an empty list and add items later\nanimals = []\nanimals.append(\"dog\")\nanimals.append(\"cat\")\n\n# 4) Create from a string or range\nletters = list(\"hello\")   # turns each character into an item\nnumbers = list(range(5))  # 0, 1, 2, 3, 4\n\n# Print all created lists\nprint(\"Fruits:\", fruits)\nprint(\"Colors:\", colors)\nprint(\"Animals:\", animals)\nprint(\"Letters:\", letters)\nprint(\"Numbers:\", numbers)",
          "hints": [
            "Use list() constructor to convert other iterables to lists",
            "append() adds items to the end of a list",
            "range(n) creates numbers from 0 to n-1"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Creation**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Create different types of lists and practice various creation methods."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task:\n# 1) Create a list of 4 favorite foods using square brackets\n# 2) Create a list of numbers from 0 to 6 using range() and list()\n# 3) Create an empty list named my_items, then append two items you like\n\n# 1) foods = ...\n# 2) nums  = ...\n# 3) my_items = ... ; then append two items\n\n# Print your results\n# print(\"Foods:\", foods)\n# print(\"Numbers:\", nums)\n# print(\"My items:\", my_items)",
          "expected_output": "Foods: ['pizza', 'sushi', 'pasta', 'tacos']\nNumbers: [0, 1, 2, 3, 4, 5, 6]\nMy items: ['book', 'pen']",
          "solution": "# 1) Using square brackets\nfoods = [\"pizza\", \"sushi\", \"pasta\", \"tacos\"]  # choose your own examples\n\n# 2) Using list(range())\nnums = list(range(7))  # 0..6\n\n# 3) Start empty and append\nmy_items = []\nmy_items.append(\"book\")\nmy_items.append(\"pen\")\n\n# Print your results\nprint(\"Foods:\", foods)\nprint(\"Numbers:\", nums)\nprint(\"My items:\", my_items)",
          "hints": [
            "Use square brackets [] for direct list creation",
            "list(range(7)) creates numbers 0 through 6",
            "Start with empty list [] then use append() to add items"
          ]
        }
      ],
      "tags": ["lists", "creation", "append", "range"],
      "type": "initial",
      "order": 1,
      "created_date": "2025-01-01"
    },
    "list-access": {
      "title": "List Access",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Access**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Every item in a list has a position number called an index."
        },
        {
          "type": "list",
          "items": [
            "The first item is index 0.",
            "The second item is index 1, and so on.",
            "Negative indices count from the end: -1 is the last item, -2 is the second last."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n# Access items by index\nfirst  = fruits[0]   # 'apple'\nthird  = fruits[2]   # 'cherry'\nlast   = fruits[-1]  # 'date'\nsecond_last = fruits[-2]  # 'cherry'\n\n# Print the accessed items\nprint(\"First:\", first)\nprint(\"Third:\", third)\nprint(\"Last:\", last)\nprint(\"Second last:\", second_last)",
          "expected_output": "First: apple\nThird: cherry\nLast: date\nSecond last: cherry",
          "solution": "fruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n# Access items by index\nfirst  = fruits[0]   # 'apple'\nthird  = fruits[2]   # 'cherry'\nlast   = fruits[-1]  # 'date'\nsecond_last = fruits[-2]  # 'cherry'\n\n# Print the accessed items\nprint(\"First:\", first)\nprint(\"Third:\", third)\nprint(\"Last:\", last)\nprint(\"Second last:\", second_last)",
          "hints": [
            "Index starts at 0, not 1",
            "Use negative indices to count from the end",
            "fruits[-1] gets the last item"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Access**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Create a list of 5 student names and access specific positions."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task: Create a list of 5 student names. Print:\n# - The first student\n# - The third student  \n# - The last student (use a negative index)\n\n# students = [...]\n# print(\"First:\", ...)\n# print(\"Third:\", ...)\n# print(\"Last:\", ...)",
          "expected_output": "First: Alice\nThird: Charlie\nLast: Eva",
          "solution": "students = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"]\nprint(\"First:\", students[0])    # first\nprint(\"Third:\", students[2])    # third\nprint(\"Last:\", students[-1])   # last",
          "hints": [
            "Remember: first item is at index 0",
            "Third item is at index 2",
            "Use students[-1] for the last item"
          ]
        }
      ],
      "tags": ["lists", "indexing", "access"],
      "type": "initial",
      "order": 3,
      "created_date": "2025-01-01"
    },
    "list-slicing": {
      "title": "List Slicing",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Slicing**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Slicing lets you copy a part of a list. Syntax: `list[start:end]`"
        },
        {
          "type": "list",
          "items": [
            "Includes start index, excludes the end index.",
            "Leaving out start begins from the start.",
            "Leaving out end continues to the end."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "numbers = [10, 20, 30, 40, 50, 60]\n\n# Different slicing examples\na = numbers[1:3]   # [20, 30]\nb = numbers[:4]    # [10, 20, 30, 40]\nc = numbers[2:]    # [30, 40, 50, 60]\nd = numbers[-3:]   # [40, 50, 60]\n\n# Print all slices\nprint(\"Original:\", numbers)\nprint(\"numbers[1:3]:\", a)\nprint(\"numbers[:4]:\", b)\nprint(\"numbers[2:]:\", c)\nprint(\"numbers[-3:]:\", d)",
          "expected_output": "Original: [10, 20, 30, 40, 50, 60]\nnumbers[1:3]: [20, 30]\nnumbers[:4]: [10, 20, 30, 40]\nnumbers[2:]: [30, 40, 50, 60]\nnumbers[-3:]: [40, 50, 60]",
          "solution": "numbers = [10, 20, 30, 40, 50, 60]\n\n# Different slicing examples\na = numbers[1:3]   # [20, 30]\nb = numbers[:4]    # [10, 20, 30, 40]\nc = numbers[2:]    # [30, 40, 50, 60]\nd = numbers[-3:]   # [40, 50, 60]\n\n# Print all slices\nprint(\"Original:\", numbers)\nprint(\"numbers[1:3]:\", a)\nprint(\"numbers[:4]:\", b)\nprint(\"numbers[2:]:\", c)\nprint(\"numbers[-3:]:\", d)",
          "hints": [
            "list[start:end] excludes the end index",
            "list[:n] gets first n items",
            "list[n:] gets from index n to the end"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Slicing**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice slicing with a list of cities."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task:\n# 1) Create a list of 6 cities\n# 2) Print the first 3 cities using slicing\n# 3) Print the last 2 cities using slicing (hint: negative indices)\n\n# cities = [...]\n# print(\"First 3:\", ...)\n# print(\"Last 2:\", ...)",
          "expected_output": "First 3: ['NY', 'LA', 'Chicago']\nLast 2: ['Boston', 'Miami']",
          "solution": "cities = [\"NY\", \"LA\", \"Chicago\", \"Houston\", \"Boston\", \"Miami\"]\nprint(\"First 3:\", cities[:3])   # first three\nprint(\"Last 2:\", cities[-2:])  # last two",
          "hints": [
            "cities[:3] gets the first 3 cities",
            "cities[-2:] gets the last 2 cities",
            "Remember slicing creates a new list"
          ]
        }
      ],
      "tags": ["lists", "slicing", "indexing"],
      "type": "initial",
      "order": 4,
      "created_date": "2025-01-01"
    },
    "list-modification": {
      "title": "List Modification",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Modification**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Lists are mutable (changeable). You can replace one or multiple items using indexing or slicing."
        },
        {
          "type": "code_runner",
          "starter_code": "# Example 1: Change single item\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"Before:\", fruits)\nfruits[1] = \"blueberry\"       # change single item\nprint(\"After changing index 1:\", fruits)\n\n# Example 2: Change multiple items with slicing\nnumbers = [1, 2, 3, 4, 5]\nprint(\"\\nBefore:\", numbers)\nnumbers[1:3] = [20, 30]       # replace a slice\nprint(\"After replacing slice [1:3]:\", numbers)",
          "expected_output": "Before: ['apple', 'banana', 'cherry']\nAfter changing index 1: ['apple', 'blueberry', 'cherry']\n\nBefore: [1, 2, 3, 4, 5]\nAfter replacing slice [1:3]: [1, 20, 30, 4, 5]",
          "solution": "# Example 1: Change single item\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"Before:\", fruits)\nfruits[1] = \"blueberry\"       # change single item\nprint(\"After changing index 1:\", fruits)\n\n# Example 2: Change multiple items with slicing\nnumbers = [1, 2, 3, 4, 5]\nprint(\"\\nBefore:\", numbers)\nnumbers[1:3] = [20, 30]       # replace a slice\nprint(\"After replacing slice [1:3]:\", numbers)",
          "hints": [
            "Use list[index] = value to change one item",
            "Use list[start:end] = [values] to replace multiple items",
            "Lists are mutable - they can be changed after creation"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Modification**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice modifying lists by changing individual items and using slice assignment."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task:\n# 1) Make a list of 4 colors\n# 2) Change the 2nd color to \"black\"\n# 3) Replace the last two colors with \"pink\" and \"purple\" using slicing\n\n# colors = [...]\n# print(\"Original:\", colors)\n# colors[1] = ...\n# print(\"After changing 2nd:\", colors)\n# colors[2:4] = ...\n# print(\"Final:\", colors)",
          "expected_output": "Original: ['red', 'green', 'blue', 'yellow']\nAfter changing 2nd: ['red', 'black', 'blue', 'yellow']\nFinal: ['red', 'black', 'pink', 'purple']",
          "solution": "colors = [\"red\", \"green\", \"blue\", \"yellow\"]\nprint(\"Original:\", colors)\ncolors[1] = \"black\"\nprint(\"After changing 2nd:\", colors)\ncolors[2:4] = [\"pink\", \"purple\"]\nprint(\"Final:\", colors)",
          "hints": [
            "Remember: 2nd item is at index 1",
            "Use colors[2:4] to select the last two items",
            "Assign a list of values to replace the slice"
          ]
        }
      ],
      "tags": ["lists", "modification", "mutable"],
      "type": "initial",
      "order": 5,
      "created_date": "2025-01-01"
    },
    "adding-items": {
      "title": "Adding Items",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: Adding Items**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Three common ways to add items:"
        },
        {
          "type": "list",
          "items": [
            "**append(x)** \u2192 add at the end",
            "**insert(i, x)** \u2192 add at position i",
            "**extend(iterable)** \u2192 add many items from another list or iterable"
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "fruits = [\"apple\"]\nprint(\"Starting with:\", fruits)\n\nfruits.append(\"banana\")          # end\nprint(\"After append:\", fruits)\n\nfruits.insert(0, \"cherry\")       # at index 0\nprint(\"After insert at 0:\", fruits)\n\nfruits.extend([\"grape\", \"melon\"])# multiple\nprint(\"After extend:\", fruits)",
          "expected_output": "Starting with: ['apple']\nAfter append: ['apple', 'banana']\nAfter insert at 0: ['cherry', 'apple', 'banana']\nAfter extend: ['cherry', 'apple', 'banana', 'grape', 'melon']",
          "solution": "fruits = [\"apple\"]\nprint(\"Starting with:\", fruits)\n\nfruits.append(\"banana\")          # end\nprint(\"After append:\", fruits)\n\nfruits.insert(0, \"cherry\")       # at index 0\nprint(\"After insert at 0:\", fruits)\n\nfruits.extend([\"grape\", \"melon\"])# multiple\nprint(\"After extend:\", fruits)",
          "hints": [
            "append() always adds to the end",
            "insert(0, item) adds at the beginning",
            "extend() adds all items from another list"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 Adding Items**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice all three methods of adding items to lists."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task: Start with an empty list named pets.\n# 1) Append \"dog\" and \"cat\"\n# 2) Insert \"hamster\" at index 1\n# 3) Extend with [\"parrot\", \"fish\"]\n\n# pets = []\n# pets.append(...)\n# pets.append(...)\n# pets.insert(...)\n# pets.extend(...)\n# print(\"Final pets list:\", pets)",
          "expected_output": "Final pets list: ['dog', 'hamster', 'cat', 'parrot', 'fish']",
          "solution": "pets = []\npets.append(\"dog\")\npets.append(\"cat\")\npets.insert(1, \"hamster\")\npets.extend([\"parrot\", \"fish\"])\nprint(\"Final pets list:\", pets)",
          "hints": [
            "Start with empty list: pets = []",
            "insert(1, \"hamster\") puts hamster at index 1",
            "extend() takes a list of items to add"
          ]
        }
      ],
      "tags": ["lists", "append", "insert", "extend"],
      "type": "initial",
      "order": 6,
      "created_date": "2025-01-01"
    },
    "removing-items": {
      "title": "Removing Items",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: Removing Items**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Ways to remove items:"
        },
        {
          "type": "list",
          "items": [
            "**remove(value)** \u2192 delete by value (first match)",
            "**pop([index])** \u2192 delete by position (defaults to last) and returns the removed item",
            "**del list[index]** \u2192 delete item at position",
            "**list.clear()** \u2192 remove all items"
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\", \"banana\"]\nprint(\"Original:\", fruits)\n\nfruits.remove(\"banana\")  # removes first 'banana'\nprint(\"After remove('banana'):\", fruits)\n\nlast = fruits.pop()      # removes last item, returns it\nprint(\"After pop():\", fruits)\nprint(\"Popped item:\", last)\n\n# delete by index if list still has items\nif len(fruits) > 0:\n    del fruits[0]\n    print(\"After del fruits[0]:\", fruits)\n\n# Clear demonstration\nfruits_copy = [\"apple\", \"banana\", \"cherry\"]\nfruits_copy.clear()\nprint(\"After clear():\", fruits_copy)",
          "expected_output": "Original: ['apple', 'banana', 'cherry', 'banana']\nAfter remove('banana'): ['apple', 'cherry', 'banana']\nAfter pop(): ['apple', 'cherry']\nPopped item: banana\nAfter del fruits[0]: ['cherry']\nAfter clear(): []",
          "solution": "fruits = [\"apple\", \"banana\", \"cherry\", \"banana\"]\nprint(\"Original:\", fruits)\n\nfruits.remove(\"banana\")  # removes first 'banana'\nprint(\"After remove('banana'):\", fruits)\n\nlast = fruits.pop()      # removes last item, returns it\nprint(\"After pop():\", fruits)\nprint(\"Popped item:\", last)\n\n# delete by index if list still has items\nif len(fruits) > 0:\n    del fruits[0]\n    print(\"After del fruits[0]:\", fruits)\n\n# Clear demonstration\nfruits_copy = [\"apple\", \"banana\", \"cherry\"]\nfruits_copy.clear()\nprint(\"After clear():\", fruits_copy)",
          "hints": [
            "remove() deletes the first matching value",
            "pop() removes and returns the last item (or item at given index)",
            "clear() removes all items, leaving an empty list"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 Removing Items**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice different ways to remove items from lists."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task:\n# 1) Create animals = [\"tiger\", \"lion\", \"zebra\", \"giraffe\"]\n# 2) Remove the 2nd animal using pop() and store it in a variable named removed\n# 3) Remove \"tiger\" using remove()\n# 4) Show the final list and the value of removed\n\n# animals = [\"tiger\", \"lion\", \"zebra\", \"giraffe\"]\n# removed = animals.pop(...)\n# animals.remove(...)\n# print(\"Final animals:\", animals)\n# print(\"Removed animal:\", removed)",
          "expected_output": "Final animals: ['zebra', 'giraffe']\nRemoved animal: lion",
          "solution": "animals = [\"tiger\", \"lion\", \"zebra\", \"giraffe\"]\nremoved = animals.pop(1)   # removes \"lion\" at index 1\nanimals.remove(\"tiger\")\nprint(\"Final animals:\", animals)\nprint(\"Removed animal:\", removed)",
          "hints": [
            "pop(1) removes the item at index 1 (2nd item)",
            "remove(\"tiger\") removes \"tiger\" by value",
            "pop() returns the removed item"
          ]
        }
      ],
      "tags": ["lists", "remove", "pop", "del", "clear"],
      "type": "initial",
      "order": 7,
      "created_date": "2025-01-01"
    },
    "looping-through-lists": {
      "title": "Looping Through Lists",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: Looping Through Lists**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: A loop lets you repeat an action for each item in the list."
        },
        {
          "type": "list",
          "items": [
            "**for item in list:** goes item by item.",
            "**for i in range(len(list)):** iterates by index (useful when you need the index)."
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "fruits = [\"apple\", \"banana\", \"cherry\"]\n\nprint(\"Loop by value:\")\n# Loop by value\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n\nprint(\"\\nLoop by index:\")\n# Loop by index\nfor i in range(len(fruits)):\n    print(f\"Index {i} -> {fruits[i]}\")",
          "expected_output": "Loop by value:\nI like apple\nI like banana\nI like cherry\n\nLoop by index:\nIndex 0 -> apple\nIndex 1 -> banana\nIndex 2 -> cherry",
          "solution": "fruits = [\"apple\", \"banana\", \"cherry\"]\n\nprint(\"Loop by value:\")\n# Loop by value\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n\nprint(\"\\nLoop by index:\")\n# Loop by index\nfor i in range(len(fruits)):\n    print(f\"Index {i} -> {fruits[i]}\")",
          "hints": [
            "for item in list: is simpler when you only need the values",
            "for i in range(len(list)): is useful when you need the index",
            "Use f-strings for formatted output"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 Looping**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice both types of loops with a list of numbers."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task: Create nums = [1, 2, 3, 4, 5]\n# 1) Print each number multiplied by 2 using a value loop\n# 2) Print \"Index i has value v\" using an index loop\n\n# nums = [1, 2, 3, 4, 5]\n# \n# print(\"Doubled values:\")\n# for n in nums:\n#     print(...)\n# \n# print(\"\\nIndex and values:\")\n# for i in range(len(nums)):\n#     print(...)",
          "expected_output": "Doubled values:\n2\n4\n6\n8\n10\n\nIndex and values:\nIndex 0 has value 1\nIndex 1 has value 2\nIndex 2 has value 3\nIndex 3 has value 4\nIndex 4 has value 5",
          "solution": "nums = [1, 2, 3, 4, 5]\n\nprint(\"Doubled values:\")\nfor n in nums:\n    print(n * 2)\n\nprint(\"\\nIndex and values:\")\nfor i in range(len(nums)):\n    print(f\"Index {i} has value {nums[i]}\")",
          "hints": [
            "Multiply each number by 2: n * 2",
            "Use range(len(nums)) to get indices",
            "Access list items with nums[i]"
          ]
        }
      ],
      "tags": ["lists", "loops", "iteration"],
      "type": "initial",
      "order": 8,
      "created_date": "2025-01-01"
    },
    "list-comprehension": {
      "title": "List Comprehension",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Comprehension**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: A concise way to build lists from expressions and conditions in one line."
        },
        {
          "type": "paragraph",
          "text": "**Template**: `[expression for item in iterable if condition]`"
        },
        {
          "type": "code_runner",
          "starter_code": "# Example 1: Squares of numbers 0-5\nsquares = [x*x for x in range(6)]\nprint(\"Squares:\", squares)\n\n# Example 2: Even numbers from 0-9\nevens = [x for x in range(10) if x % 2 == 0]\nprint(\"Evens:\", evens)\n\n# Example 3: Uppercase fruits\nfruits = [\"apple\", \"banana\", \"cherry\"]\nupper_fruits = [fruit.upper() for fruit in fruits]\nprint(\"Uppercase fruits:\", upper_fruits)",
          "expected_output": "Squares: [0, 1, 4, 9, 16, 25]\nEvens: [0, 2, 4, 6, 8]\nUppercase fruits: ['APPLE', 'BANANA', 'CHERRY']",
          "solution": "# Example 1: Squares of numbers 0-5\nsquares = [x*x for x in range(6)]\nprint(\"Squares:\", squares)\n\n# Example 2: Even numbers from 0-9\nevens = [x for x in range(10) if x % 2 == 0]\nprint(\"Evens:\", evens)\n\n# Example 3: Uppercase fruits\nfruits = [\"apple\", \"banana\", \"cherry\"]\nupper_fruits = [fruit.upper() for fruit in fruits]\nprint(\"Uppercase fruits:\", upper_fruits)",
          "hints": [
            "List comprehension format: [expression for item in iterable]",
            "Add 'if condition' at the end to filter items",
            "Much more concise than traditional loops"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Comprehension**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Create lists using comprehension syntax."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task:\n# 1) Build a list of cubes for numbers from 1 to 5\n# 2) Build a list of numbers from 1 to 12 that are divisible by 3\n\n# cubes = [... for x in range(1, 6)]\n# div3  = [... for x in range(1, 13) if ...]\n# \n# print(\"Cubes:\", cubes)\n# print(\"Divisible by 3:\", div3)",
          "expected_output": "Cubes: [1, 8, 27, 64, 125]\nDivisible by 3: [3, 6, 9, 12]",
          "solution": "cubes = [x**3 for x in range(1, 6)]\ndiv3  = [x for x in range(1, 13) if x % 3 == 0]\n\nprint(\"Cubes:\", cubes)\nprint(\"Divisible by 3:\", div3)",
          "hints": [
            "Use x**3 for cubes (x to the power of 3)",
            "x % 3 == 0 checks if x is divisible by 3",
            "range(1, 6) gives numbers 1 through 5"
          ]
        }
      ],
      "tags": ["lists", "comprehension", "advanced"],
      "type": "initial",
      "order": 9,
      "created_date": "2025-01-01"
    },
    "list-functions-methods": {
      "title": "List Functions and Methods",
      "videoId": "",
      "content": [
        {
          "type": "paragraph",
          "text": "\ud83c\udff7\ufe0f **Tag: List Functions and Methods**"
        },
        {
          "type": "paragraph",
          "text": "**Concept**: Useful built-ins for lists:"
        },
        {
          "type": "list",
          "items": [
            "**len(list)** \u2192 number of items",
            "**max(list), min(list)** \u2192 largest/smallest item (for numbers or comparable values)",
            "**sum(list)** \u2192 total of numeric items",
            "**list.sort()** \u2192 sorts list in place (ascending by default)",
            "**list.reverse()** \u2192 reverses the list in place"
          ]
        },
        {
          "type": "code_runner",
          "starter_code": "nums = [10, 5, 8, 20, 15]\nprint(\"Original:\", nums)\n\n# Built-in functions\nlength = len(nums)\nlargest = max(nums)\nsmallest = min(nums)\ntotal = sum(nums)\n\nprint(f\"Length: {length}\")\nprint(f\"Max: {largest}, Min: {smallest}\")\nprint(f\"Sum: {total}\")\n\n# Non-destructive operations (returns new lists)\nnums_sorted = sorted(nums)  # returns a new list\nnums_reversed = list(reversed(nums))  # returns new list\n\nprint(\"Sorted (new list):\", nums_sorted)\nprint(\"Reversed (new list):\", nums_reversed)\nprint(\"Original unchanged:\", nums)\n\n# Destructive operations (modify original)\nnums_copy = nums.copy()  # make a copy first\nnums_copy.sort()         # in-place sort\nnums_copy.reverse()      # in-place reverse\nprint(\"Copy after sort + reverse:\", nums_copy)",
          "expected_output": "Original: [10, 5, 8, 20, 15]\nLength: 5\nMax: 20, Min: 5\nSum: 58\nSorted (new list): [5, 8, 10, 15, 20]\nReversed (new list): [15, 20, 8, 5, 10]\nOriginal unchanged: [10, 5, 8, 20, 15]\nCopy after sort + reverse: [20, 15, 10, 8, 5]",
          "solution": "nums = [10, 5, 8, 20, 15]\nprint(\"Original:\", nums)\n\n# Built-in functions\nlength = len(nums)\nlargest = max(nums)\nsmallest = min(nums)\ntotal = sum(nums)\n\nprint(f\"Length: {length}\")\nprint(f\"Max: {largest}, Min: {smallest}\")\nprint(f\"Sum: {total}\")\n\n# Non-destructive operations (returns new lists)\nnums_sorted = sorted(nums)  # returns a new list\nnums_reversed = list(reversed(nums))  # returns new list\n\nprint(\"Sorted (new list):\", nums_sorted)\nprint(\"Reversed (new list):\", nums_reversed)\nprint(\"Original unchanged:\", nums)\n\n# Destructive operations (modify original)\nnums_copy = nums.copy()  # make a copy first\nnums_copy.sort()         # in-place sort\nnums_copy.reverse()      # in-place reverse\nprint(\"Copy after sort + reverse:\", nums_copy)",
          "hints": [
            "len(), max(), min(), sum() are built-in functions",
            "sorted() and reversed() return new lists",
            ".sort() and .reverse() modify the original list"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83d\udcdd **Practice \u2014 List Functions & Methods**"
        },
        {
          "type": "paragraph",
          "text": "**Task**: Practice using various list functions and methods."
        },
        {
          "type": "code_runner",
          "starter_code": "# Task: Given vals = [3, 1, 4, 1, 5, 9]\n# 1) Print the length\n# 2) Print the min, max, and sum\n# 3) Create a sorted copy (do not modify the original)\n# 4) Create a reversed copy (do not modify the original)\n# 5) Show that original is unchanged\n\n# vals = [3, 1, 4, 1, 5, 9]\n# print(\"Length:\", ...)\n# print(\"Min:\", ..., \"Max:\", ..., \"Sum:\", ...)\n# sorted_copy = ...\n# reversed_copy = ...\n# print(\"Sorted:\", sorted_copy)\n# print(\"Reversed:\", reversed_copy)\n# print(\"Original:\", vals)  # should be unchanged",
          "expected_output": "Length: 6\nMin: 1 Max: 9 Sum: 23\nSorted: [1, 1, 3, 4, 5, 9]\nReversed: [9, 5, 1, 4, 1, 3]\nOriginal: [3, 1, 4, 1, 5, 9]",
          "solution": "vals = [3, 1, 4, 1, 5, 9]\n\nprint(\"Length:\", len(vals))\nprint(\"Min:\", min(vals), \"Max:\", max(vals), \"Sum:\", sum(vals))\n\nsorted_copy = sorted(vals)      # new list\nreversed_copy = list(reversed(vals))  # new list\n\nprint(\"Sorted:\", sorted_copy)\nprint(\"Reversed:\", reversed_copy)\nprint(\"Original:\", vals)  # should be unchanged",
          "hints": [
            "Use sorted() to get a new sorted list",
            "Use list(reversed()) to get a new reversed list",
            "The original list should remain unchanged"
          ]
        },
        {
          "type": "paragraph",
          "text": "\ud83e\uddfe **Quick Reference (Cheat Sheet)**"
        },
        {
          "type": "list",
          "items": [
            "**Create**: `[]`, `list(iterable)`, `list(range(n))`",
            "**Access**: `lst[i]`, `lst[-1]`",
            "**Slice**: `lst[a:b]`, `lst[:b]`, `lst[a:]`, `lst[-k:]`",
            "**Modify**: `lst[i] = x`, `lst[a:b] = [...]`",
            "**Add**: `append(x)`, `insert(i, x)`, `extend([...])`",
            "**Remove**: `remove(x)`, `pop([i])`, `del lst[i]`, `clear()`",
            "**Loop**: `for x in lst: ...`, `for i in range(len(lst)): ...`",
            "**Comprehension**: `[expr for x in iterable if cond]`",
            "**Built-ins**: `len`, `min`, `max`, `sum`, `sorted`, `reversed`",
            "**Methods**: `sort()`, `reverse()`"
          ]
        }
      ],
      "tags": ["lists", "functions", "methods", "reference"],
      "type": "initial",
      "order": 10,
      "created_date": "2025-01-01"
    }
  }
}
